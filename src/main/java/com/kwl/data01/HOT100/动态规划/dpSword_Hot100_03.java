package com.kwl.data01.HOT100.动态规划;

/**
 * @author kuang.weilin
 * @date 2021/7/7 22:21
 */
public class dpSword_Hot100_03 {

    /**
     * 题目01(leetcode 第279题): 完全平方数
     * 描述:给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
     * 给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。
     * 完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。
     * <p>
     * eg：
     * 输入：n = 12
     * 输出：3
     * 解释：12 = 4 + 4 + 4
     * <p>
     * 输入：n = 13
     * 输出：2
     * 解释：13 = 4 + 9
     * <p>
     * 思路01:  初始化是dp[0] = 0,dp[1]代表就是输入1
     * 动态规划，dp[i - j*j] + 1(注意,此时是j*j构成完全平方数,所以就是要dp+1)
     */
    public int numSquares(int n) {
        int[] dp = new int[n + 1];    //我们初始化包括dp[0] = 0,dp[16 - 4*4]+1=dp[0]+1,正好是1(不要考虑0*0!!!!)
        for (int i = 1; i < dp.length; i++) {
            dp[i] = i;                   //dp[i]初始化,最大值是1*1 + 1*1 ....
            for (int j = 1; i - j * j >= 0; j++) {
                dp[i] = Math.max(dp[i], dp[i - j * j] + 1);
            }
        }
        return dp[n];
    }
}
